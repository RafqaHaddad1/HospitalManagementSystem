@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

﻿
<!DOCTYPE html>
<html lang="en">
<head>


    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - YourAppName</title>
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Include Select2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/js/select2.min.js"></script>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.10.2/dropzone.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.10.2/dropzone.min.js"></script>
    <style>
        .container {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            max-width: 1500px; /* Adjust max width as needed */
            margin: 0 auto;
        }

        .radio-group div {
            display: inline-block;
            margin-bottom: 10px;
        }

        .form-container {
            display: flex;
            flex-direction: row; /* Change to row direction */
            justify-content: space-between;
            width: 90%;
            background-color: #e0e0e0;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            column-gap: 20px; /* Add space between columns */
        }

        .form-left, .form-right {
            display: flex;
            flex-direction: column;
            width: 48%;
        }

            .form-left input, .form-right input, .form-right textarea, .form-right select {
                margin-bottom: 10px;
                padding: 8px;
                border: 1px solid #ccc;
                border-radius: 5px;
            }

            .form-right textarea {
                height: 150px;
            }

            .form-left input[type="file"] {
                padding: 3px;
            }

        .save-button {
            margin-top: 20px;
            padding: 10px 20px;
            background-color: #44444c;
            margin-bottom: 20px;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .profile-pic {
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: #44444c;
            border-radius: 50%;
            width: 100px;
            height: 100px;
            color: white;
            font-size: 40px;
            margin-bottom: 20px;
        }

        .radio-group label {
            margin-right: 20px;
        }

        .drop-section {
            border: 2px dashed #ccc;
            border-radius: 5px;
            padding: 20px;
            text-align: center;
        }

        .drag-over-effect {
            border-color: #44444c;
        }

        .file-list {
            margin-top: 20px;
        }

            .file-list ul {
                list-style-type: none;
                padding: 0;
            }

            .file-list li {
                margin-bottom: 5px;
                position: relative;
                padding: 10px;
                background: #f9f9f9;
                border: 1px solid #ddd;
                border-radius: 5px;
                display: flex;
                align-items: center;
            }

            .file-list img {
                width: 50px;
                height: 50px;
                margin-right: 10px;
            }

            .file-list .remove-button {
                position: absolute;
                right: 0;
                top: 0;
                background: red;
                color: white;
                border: none;
                border-radius: 3px;
                cursor: pointer;
                padding: 3px 8px;
                font-size: 12px;
                margin-left: 10px;
            }

        .form-control {
            display: block;
            width: 100%;
            height: 34px;
            padding: 6px 12px;
            font-size: 14px;
            line-height: 1.42857143;
            color: #555;
            background-color: #fff;
            background-image: none;
            border: 1px solid #ccc;
            border-radius: 4px;
            -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);
            box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);
            -webkit-transition: border-color ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;
            -o-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
            transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s
        }

        .form-control {
            border-radius: 0;
            box-shadow: none;
            border-color: #d2d6de
        }

        .select2-hidden-accessible {
            border: 0 !important;
            clip: rect(0 0 0 0) !important;
            height: 1px !important;
            margin: -1px !important;
            overflow: hidden !important;
            padding: 0 !important;
            position: absolute !important;
            width: 1px !important
        }

        .select2-container--default .select2-selection--single,
        .select2-selection .select2-selection--single {
            border: 1px solid #d2d6de;
            border-radius: 5px;
            padding: 6px 12px;
            height: 34px;
            margin-bottom: 10px
        }

        .select2-container--default .select2-selection--single {
            background-color: #fff;
            border: 1px solid #aaa;
            border-radius: 5px
        }

        .select2-container .select2-selection--single {
            box-sizing: border-box;
            cursor: pointer;
            display: block;
            height: 28px;
            user-select: none;
            -webkit-user-select: none
        }

            .select2-container .select2-selection--single .select2-selection__rendered {
                padding-right: 10px
            }

            .select2-container .select2-selection--single .select2-selection__rendered {
                padding-left: 0;
                padding-right: 0;
                height: auto;
                margin-top: -3px
            }

        .select2-container--default .select2-selection--single .select2-selection__rendered {
            line-height: 28px
        }

        .select2-container--default .select2-selection--single,
        .select2-selection .select2-selection--single {
            border: 1px solid #d2d6de;
            border-radius: 5px !important;
            padding: 6px 12px;
            height: 40px !important
        }

            .select2-container--default .select2-selection--single .select2-selection__arrow {
                height: 26px;
                position: absolute;
                top: 6px !important;
                right: 1px;
                width: 20px
            }

        .select2-container--default .select2-results__option {
            padding: 8px 12px;
            font-size: 14px;
            border-bottom: 1px solid #ddd;
            border-radius: 5px;
        }

        .select2-container--default .select2-results__option--highlighted {
            background-color: #44444c !important;
            color: white !important;
        }
        /* Style the search box container */
        .select2-container--default .select2-search--dropdown .select2-search__field {
            padding: 8px;
            border: 1px solid #d2d6de;
            border-radius: 5px;
            box-sizing: border-box;
            font-size: 14px;
        }

            /* Style the search box input */
            .select2-container--default .select2-search--dropdown .select2-search__field:focus {
                border-color: #44444c;
                outline: none;
                box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, 0.25);
                border-radius: 5px;
            }

        .select2-container--default .select2-dropdown {
            border: 1px solid #d2d6de;
            border-radius: 5px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            background-color: #fff;
            max-height: 200px; /* Adjust as needed */
            overflow-y: auto; /* Enable scrolling if options overflow */
        }
    </style>

    <link rel="stylesheet" href="~/css/site.css">

</head>
<body>
    <div class="container">
        <h1 class="Title">Edit Staff</h1>

        <form class="container" id="Doctor-Form" asp-action="UpdateEmployee" asp-controller="Staff" method="post" enctype="multipart/form-data" onsubmit="return validateAndRedirect()">
            <div class="form-container">
                <div class="form-left">
                    <div class="profile-pic">
                        <i class="fas fa-user"></i>
                    </div>
                    <input type="number" name="StaffID" id="StaffID" placeholder="StaffId"/>
                    <input type="text" name="Name" id="Name" placeholder="Name" />
                  
                    <input type="text" name="PhoneNumber" id="PhoneNumber" placeholder="Phone" />
                    <input type="text" name="Address" id="Address" placeholder="Address" />
                    <input type="Date" name="DateOfBirth" id="DateOfBirth" placeholder="DateOfBirth" />
                    <div class="form-group radio-group">
                        <label>Gender:</label>
                        <div>
                            <input type="radio" id="Male" name="Gender" value="Male">
                            <label for="Male">Male</label>
                        </div>
                        <div>
                            <input type="radio" id="Female" name="Gender" value="Female">
                            <label for="Female">Female</label>
                        </div>

                    </div>
                    <input type="text" name="qualifications" id="qualifications" placeholder="Qualifications" />
                    <div class="form-group radio-group">
                        <label>Role:</label>
                        <div>
                            <input type="radio" id="Doctor" name="Role" value="Doctor">
                            <label for="Doctor">Doctor</label>
                        </div>
                        <div>
                            <input type="radio" id="Nurse" name="Role" value="Nurse">
                            <label for="Nurse">Nurse</label>
                        </div>
                        <div>
                            <input type="radio" id="Lab" name="Role" value="Lab">
                            <label for="Lab">Lab</label>
                        </div>
                        <div>
                            <input type="radio" id="Radiology" name="Role" value="Radiology">
                            <label for="Radiology">Radiology</label>
                        </div>
                    </div>
                    <input type="text" name="DoctorLicenseNumber" id="DoctorLicenseNumber" placeholder="DoctorLicenseNumber" />


                </div>
                <div class="form-right">
                    <!-- Dropzone for file upload -->
                    <div class="drop-section" id="dropzone">
                        <h3>Drag and Drop Files Here</h3>
                        <p>or <button type="button" id="browse-files">Browse Files</button></p>
                        <input type="file" name="Files" id="file-input" multiple style="display:none" />
                        <div id="file-list" class="file-list">
                            <h5>Uploaded Files</h5>
                            <ul id="file-items"></ul>
                        </div>
                    </div>
                    <input type="text" id="Files" hidden/>
                    <div class="form-group radio-group">
                        <label>Employment Type:</label>
                        <div>
                            <input type="radio" id="partTime" name="EmploymentType" value="PartTime">
                            <label for="partTime">Part Time</label>
                        </div>
                        <div>
                            <input type="radio" id="fullTime" name="EmploymentType" value="FullTime">
                            <label for="fullTime">Full Time</label>
                        </div>
                    </div>
                    <select name="departmentname" id="department" class="department form-control" data-placeholder="Select a department" style="width: 100%;" tabindex="-1" aria-hidden="true" onchange="updateDepartmentID()">
                        <option value="" selected disabled>Select a department</option>
                    </select>
                    <input type="number" name="Department" id="DepartmentID" placeholder="Department ID" />
                    <input type="text" name="AdditionalNotes" placeholder="Additional Notes"></input>
                </div>
            </div>
            <input type="Submit" id="UpdateStaff" class="save-button" value="Update" />
        </form>
    </div>


    <script>
        $(document).ready(function () {
            fetchStaffDetails();
           
        });
        var staffID = sessionStorage.getItem("Staffid");
        function fetchStaffDetails() {
            $.ajax({
                url: '/Staff/StaffById/' + staffID,
                type: 'GET',
                success: function (response) {
                    console.log(response);
                    if (response.success) {
                        var staff = response.model.staff; // Assuming model is an array, access the first element

                        // Fill the form fields in the modal with staff data
                        $("#StaffID").val(staff.staffID || "N/A");
                        $("#Name").val(staff.name || "N/A");
                        $("input[name='PhoneNumber']").val(staff.phoneNumber || "N/A");
                        $("input[name='Address']").val(staff.address || "N/A");
                        $("input[name='DateOfBirth']").val(staff.dateOfBirth || "N/A");
                        $("input[name='qualifications']").val(staff.qualifications || "N/A");
                      
                        $("input[name='DoctorLicenseNumber']").val(staff.doctorLicenseNumber || "N/A");
                        // Fill department data
                       
                        $("input[name='Department']").val(response.model.department.departmentID || "N/A");
                        DepartmentDropDown();
                        $("input[name='AdditionalNotes']").val(staff.additionalNotes || "N/A");

                        // Set the gender radio button
                        if (staff.gender === 'Male') {
                            $("#Male").prop('checked', true);
                        } else if (staff.gender === 'Female') {
                            $("#Female").prop('checked', true);
                        }

                        // Set the title radio button
                        if (staff.role === 'Doctor') {
                            $("#Doctor").prop('checked', true);
                        } else if (staff.role === 'Nurse') {
                            $("#Nurse").prop('checked', true);
                        } else if (staff.role === 'Lab') {
                            $("#Lab").prop('checked', true);
                        } else if (staff.role === 'Radiology') {
                            $("#Radiology").prop('checked', true);
                        }

                        // Set the employment type radio button
                        if (staff.employmentType === 'PartTime') {
                            $("#partTime").prop('checked', true);
                        } else if (staff.employmentType === 'FullTime') {
                            $("#fullTime").prop('checked', true);
                        }

                        var listGroup = $('#file-items');
                        listGroup.empty();

                        // Split the file items (assuming file paths are separated by semicolons)
                        var filePaths = staff.filePath.split(';');

                        // Iterate through each file path
                        filePaths.forEach(function (filePath) {
                            var trimmedPath = filePath.trim();
                            if (trimmedPath) {
                                // Create a new list item with a link and a remove button
                                var fileName = trimmedPath.substring(trimmedPath.lastIndexOf('/') + 1); // Extract the file name from the path

                                var listItem = `
                                        <li>
                                            <a href="${trimmedPath}" target="_blank">${fileName}</a>
                                            
                                        </li>
                                    `;

                                // Append the new item to the list group
                                listGroup.append(listItem);
                            }
                        });

                    } else {
                        alert("Failed to fetch staff data.");
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error: " + error);
                }
            });
        }

        $('.department').select2();
        function DepartmentDropDown() {
            $.ajax({
                url: '/Department/AllDepartments',
                type: 'GET',
                success: function (response) {
                    console.log(response); // Log the response object

                    if (response.success) {
                        var DepartmentDropDown = document.getElementById("department");
                        DepartmentDropDown.innerHTML = ""; // Clear existing options
                        // Add a default "Select a Supervisor" option
                        var defaultOption = document.createElement("option");
                        defaultOption.value = "";
                        defaultOption.text = "Select a Department";
                        defaultOption.disabled = true;
                        defaultOption.selected = true;
                        DepartmentDropDown.appendChild(defaultOption);
                        // Populate the zone dropdown with new options
                        response.model.forEach(function (department) {
                            var option = document.createElement("option");
                            option.value = department.departmentID;
                            option.text = department.departmentName;
                            option.setAttribute("data-department-id", department.departmentID);
                            console.log("Department ID: ", department.departmentID);
                            DepartmentDropDown.appendChild(option);
                        });
                        const DepartmentID = $("#DepartmentID").val();
                        console.log("head Id selected " + $("#DepartmentID").val());
                        if (DepartmentID) {
                            // Ensure the option exists before setting it as selected
                            const optionToSelect = Array.from(DepartmentDropDown.options).find(option => option.value == DepartmentID);
                            if (optionToSelect) {
                                optionToSelect.selected = true;
                            }
                        }

                    } else {
                        alert('Failed to retrieve department: ' + response.message);
                    }
                },
                error: function (xhr, status, error) {
                    alert('Error: ' + error);
                }
            });
        }

        function updateDepartmentID() {
            var selectedOption = document.getElementById("department").selectedOptions[0];
            // Get the Zone_ID from the data attribute
            var departmentID = selectedOption.getAttribute("data-department-id"); // Fix the attribute name
            // Set the Zone_ID input field value
            document.getElementById("DepartmentID").value = departmentID;
        }

        const dropzone = document.getElementById('dropzone');
        const fileInput = document.getElementById('file-input');
        const fileItems = document.getElementById('file-items');
        const browseFilesBtn = document.getElementById('browse-files');
        const filenameinput = document.getElementById('Files');
        const filenames = [];
        // Show file input when 'Browse Files' button is clicked
        browseFilesBtn.onclick = () => fileInput.click();

        // Handle file input change
        fileInput.onchange = () => {
            [...fileInput.files].forEach(file => {
                if (typeValidation(file.type)) {
                    console.log(file);
                    filenames.push(file);
                    handleFile(file);
                }
            });

            filenameinput.value = filenames.join(', ');
            console.log(filenames.join(', '));
            console.log(filenameinput);
        };



        // Handle drag over
        dropzone.ondragover = (e) => {
            e.preventDefault();
            dropzone.classList.add('drag-over-effect');
        };

        // Handle drag leave
        dropzone.ondragleave = () => {
            dropzone.classList.remove('drag-over-effect');
        };

        // Handle drop
        dropzone.ondrop = (e) => {
            e.preventDefault();
            dropzone.classList.remove('drag-over-effect');
            if (e.dataTransfer.files) {
                [...e.dataTransfer.files].forEach(file => {
                    if (typeValidation(file.type)) {
                        handleFile(file);
                    }
                });
            }
        };

        // Validate file type
        function typeValidation(type) {
            const splitType = type.split('/')[0];
            return type === 'application/pdf' || splitType === 'image' || splitType === 'video';
        }

        // Handle file
        function handleFile(file) {
            const li = document.createElement('li');
            li.classList.add('file-item');
            li.innerHTML = `
                                                    <div class="col">
                                                        <img src="icons/${iconSelector(file.type)}" alt="">
                                                    </div>
                                                    <div class="col">
                                                        <div class="file-name">
                                                            <div class="name">${file.name}</div>
                                                            <span>0%</span>
                                                        </div>
                                                        <div class="file-progress">
                                                            <span></span>
                                                        </div>
                                                        <div class="file-size">${(file.size / (1024 * 1024)).toFixed(2)} MB</div>
                                                    </div>
                                                    <div class="col">
                                                        <button class="remove-button">Remove</button>
                                                    </div>
                                                `;
            fileItems.appendChild(li);

            // Simulate file upload progress
            simulateUploadProgress(file, li);

            // Add event listener to remove file
            li.querySelector('.remove-button').onclick = () => li.remove();
        }

        // Simulate upload progress
        function simulateUploadProgress(file, li) {
            const progressBar = li.querySelector('.file-progress span');
            let progress = 0;
            const interval = setInterval(() => {
                progress += 10;
                progressBar.style.width = `${progress}%`;
                li.querySelector('.file-name span').textContent = `${progress}%`;
                if (progress >= 100) {
                    clearInterval(interval);
                }
            }, 200);
        }

        // Determine file icon based on file type
        function iconSelector(fileType) {
            if (fileType === 'application/pdf') return 'pdf.png';
            if (fileType.startsWith('image')) return 'image.png';
            if (fileType.startsWith('video')) return 'video.png';
            return 'file.png';
        }

        function validateAndRedirect() {
            document.getElementById('Doctor-Form').submit();
            alert("Saff updated Successfully");
            window.location.href = 'Staff/Staffs';
           
        }
    </script>
</body>
</html>